###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.4.5)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
all:
	@echo "***************************************************************"
	@echo "You cannot use this Makefile directly, instead use the"
	@echo "architecture-specific Makefile. For example:"
	@echo "         gmake -f make/Makefile.i86Linux2.6gcc4.4.5"
	@echo "***************************************************************"
	@false
else
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
all:
	@echo "***************************************************************"
	@echo "The environment variable 'NDDSHOME' is not set!"
	@echo "To use this makefile you need to set NDDSHOME to the directory"
	@echo "where you have RTI Connext installed."
	@echo "***************************************************************"
	@false
endif
endif

# Get plaform name from the system
PLATFORM = $(shell uname)

# Define the sources and NDDS search path
INCLUDES = -Isrc/CommonInfrastructure -Isrc/Generated -I$(NDDSHOME)/include \
           -I$(NDDSHOME)/include/ndds 

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscppd -lnddscd -lnddscored
else
NDDSLIBS = -lnddscppzd -lnddsczd -lnddscorezd
endif
else
CXXFLAGS += -O2
ifeq ($(SHAREDLIB),1)
NDDSLIBS = -lnddscpp -lnddsc -lnddscore
else
NDDSLIBS = -lnddscppz -lnddscz -lnddscorez
endif
endif

LIBS = -L$(NDDSHOME)/lib/$(ARCH) $(NDDSLIBS) $(SYSLIBS)

COMMONSRC = src/CommonInfrastructure/DDSCommunicator.cxx     \
          src/CommonInfrastructure/OSAPI.cxx               \

COMMON_H  = src/CommonInfrastructure/DDSCommunicator.h \
          src/CommonInfrastructure/OSAPI.h               \
          src/CommonInfrastructure/DDSTypeWrapper.h       \

SOURCES_IDL = src/Generated/alarm.cxx    \
          src/Generated/alarmPlugin.cxx  \
          src/Generated/alarmSupport.cxx \
          src/Generated/ice.cxx  \
          src/Generated/icePlugin.cxx  \
          src/Generated/iceSupport.cxx \
          src/Generated/patient.cxx  \
          src/Generated/patientPlugin.cxx  \
          src/Generated/patientSupport.cxx \
          src/Generated/profiles.cxx  \
          src/Generated/profilesPlugin.cxx  \
          src/Generated/profilesSupport.cxx

BEDSIDESUPSRC = src/BedsideSupervisor/BedsideSupervisor.cxx \
          src/BedsideSupervisor/DDSNetworkInterface.cxx

PATIENTDEVICESRC = src/PatientDevices/PatientDeviceGenerator.cxx \
          src/PatientDevices/DDSPatientDeviceInterface.cxx 

HEADERS_IDL = src/Generated/alarm.h      \
          src/Generated/alarmPlugin.h    \
          src/Generated/alarmSupport.h   \
          src/Generated/ice.h    \
          src/Generated/icePlugin.h    \
          src/Generated/iceSupport.h   \
          src/Generated/patient.h    \
          src/Generated/patientPlugin.h    \
          src/Generated/patientSupport.h   \
          src/Generated/profiles.h    \
          src/Generated/profilesPlugin.h    \
          src/Generated/profilesSupport.h


DIRECTORIES   = objs.dir objs/$(PLATFORM).dir objs/$(PLATFORM)/BedsideSupervisor.dir \
                objs/$(PLATFORM)/PatientDevices.dir  \
                objs/$(PLATFORM)/Common.dir
SOURCES_NODIR = $(notdir $(COMMONSRC)) $(notdir $(SOURCES_IDL))
COMMONOBJS    = $(SOURCES_NODIR:%.cxx=objs/$(PLATFORM)/Common/%.o)
EXEC          = BedsideSupervisor

BEDSIDESUPSRC_NODIR = $(notdir $(BEDSIDESUPSRC))
BEDSIDESUPOBJS    = $(BEDSIDESUPSRC_NODIR:%.cxx=objs/$(PLATFORM)/BedsideSupervisor/%.o) $(COMMONOBJS)

PATIENTDEVICESRC_NODIR = $(notdir $(PATIENTDEVICESRC))
PATIENTDEVOBJS = $(PATIENTDEVICESRC_NODIR:%.cxx=objs/$(PLATFORM)/PatientDevices/%.o) $(COMMONOBJS)
PATIENTDEVICEEXEC      = PatientDeviceGenerator


###############################################################################
# Build Rules
###############################################################################
$(ARCH): BedsideSupervisor PatientDevices 

BedsideSupervisor: $(DIRECTORIES) $(BEDSIDESUPOBJS) $(EXEC:%=objs/$(PLATFORM)/BedsideSupervisor/%.o) \
	$(EXEC:%=objs/$(PLATFORM)/BedsideSupervisor/%.out)


PatientDevices: $(PATIENTDEVOBJS) $(@:%=objs/$(PLATFORM)/PatientDevices/%.o) \
	 $(PATIENTDEVICEEXEC:%=objs/$(PLATFORM)/PatientDevices/%.out)

# Building the bedside supervisor application
objs/$(PLATFORM)/BedsideSupervisor/%.out: objs/$(PLATFORM)/BedsideSupervisor/%.o
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(BEDSIDESUPOBJS) $(LIBS)

# Building the patient device application
objs/$(PLATFORM)/PatientDevices/%.out: objs/$(PLATFORM)/PatientDevices/%.o
	$(CXXLD) $(CXXLDFLAGS) -o $(@:%.out=%) $(PATIENTDEVOBJS) $(LIBS)


objs/$(PLATFORM)/Common/%.o: src/CommonInfrastructure/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<
	
objs/$(PLATFORM)/Common/%.o: src/Generated/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(PLATFORM)/BedsideSupervisor/%.o: src/BedsideSupervisor/%.cxx $(COMMON_H) $(HEADERS_IDL)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

objs/$(PLATFORM)/PatientDevices/%.o: src/PatientDevices/%.cxx $(COMMON_H)
	$(CXX) $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

# Rule to rebuild the generated files when the .idl file change
$(SOURCES_IDL) $(HEADERS_IDL): src/Idl/ice.idl src/Idl/patient.idl src/Idl/alarm.idl src/Idl/profiles.idl
	@mkdir -p src/Generated
	cd src/Idl && $(NDDSHOME)/scripts/rtiddsgen -namespace -d ../../src/Generated ice.idl -replace -language C++; \
	$(NDDSHOME)/scripts/rtiddsgen -namespace -d ../../src/Generated ice.idl -replace -language C++;  \
	$(NDDSHOME)/scripts/rtiddsgen -namespace -d ../../src/Generated patient.idl -replace -language C++; \
	$(NDDSHOME)/scripts/rtiddsgen -namespace -d ../../src/Generated alarm.idl -replace -language C++;  \
	$(NDDSHOME)/scripts/rtiddsgen -namespace -d ../../src/Generated profiles.idl -replace -language C++;  \

generate: $(SOURCES_IDL) $(HEADERS_IDL)

# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

###############################################################################
# Clean target: removes the objs dir
###############################################################################
clean:
	@rm -Rf objs/$(PLATFORM)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf objs
	@rm -Rf src/idl
	@echo "Deleted all executables, objects and generated files"
