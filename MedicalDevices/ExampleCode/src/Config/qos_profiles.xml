<?xml version="1.0"?>
<!-- 
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only 
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under 
 no obligation to maintain or support the Software.  RTI shall not be liable 
 for any incidental or consequential damages arising out of the use or 
 inability to use the software.
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Description
XML QoS profile for streaming medical device data, and stateful Alarm data.

The QoS configuration of the DDS entities in this Case + Code example is loaded 
from this file.


The profiles in this file inherit from two builtin QoS profile:
- BuiltinQosLib::Generic.Common
- BuiltinQosLibExp::Pattern.ReliableStreaming


These profile, along with all of the other built-in QoS profiles can be found in 
the BuiltinProfiles.documentationONLY.xml file located in the 
$NDDSHOME/resource/qos_profiles_5.1.0/xml/ directory.

You may use any of these QoS configurations in your application simply by 
referring to them by the name shown in the 
BuiltinProfiles.documentationONLY.xml file and listed below: 

* In library "BuiltinQosLib":
** Baseline
** Baseline.5.0.0
** Baseline.5.1.0
** Generic.Common
** Generic.Monitoring.Common
** Generic.ConnextMicroCompatibility
** Generic.OtherDDSVendorCompatibility

* In library "BuiltinQosLibExp":
** Generic.StrictReliable
** Generic.KeepLastReliable
** Generic.BestEffort
** Generic.StrictReliable.HighThroughput
** Generic.StrictReliable.LowLatency
** Generic.Participant.LargeData
** Generic.Participant.LargeData.Monitoring
** Generic.StrictReliable.LargeData
** Generic.KeepLastReliable.LargeData
** Generic.StrictReliable.LargeData.FastFlow
** Generic.StrictReliable.LargeData.MediumFlow
** Generic.StrictReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.LargeData.FastFlow
** Generic.KeepLastReliable.LargeData.MediumFlow
** Generic.KeepLastReliable.LargeData.SlowFlow
** Generic.KeepLastReliable.TransientLocal
** Generic.KeepLastReliable.Transient
** Generic.KeepLastReliable.Persistent
** Generic.AutoTuning
** Pattern.PeriodicData
** Pattern.Streaming
** Pattern.ReliableStreaming
** Pattern.Event
** Pattern.AlarmEvent
** Pattern.Status
** Pattern.AlarmStatus
** Pattern.LastValueCache

You should not edit the file BuiltinProfiles.documentationONLY.xml directly.
However, if you wish to modify any of the values in a built-in profile, the
recommendation is to create a profile of your own and inherit from the built-in
profile you wish to modify. The NDDS_QOS_PROFILES.example.xml file (contained in 
the same directory as the BuiltinProfiles.documentationONLY.xml file) shows how
to inherit from the built-in profiles. 

For more information about XML QoS Profiles see Chapter 15 in the 
RTI Connext user manual.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="c:/Program Files/RTI/5.1.0/ndds.5.1.0/scripts/../resource/rtiddsgen/../qos_profiles_5.1.0/schema/rti_dds_qos_profiles.xsd"
     version="5.1.0">
    <!-- QoS Library containing the QoS profile used in the generated example.

        A QoS library is a named set of QoS profiles.
    -->
    <qos_library name="rti_ice_Library">

        <!-- ============================================================== -->
        <!--                   Streaming Data Profile                      -->
        <!-- ============================================================== -->

        <!-- QoS profile used to configure streaming reliable communication between DataWriters 
             and DataReaders.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="StreamingData" base_name="BuiltinQosLib::Generic.Common">
          
            <!-- QoS used to configure the data writer that writes reliable streaming data -->
            <datawriter_qos base_name="BuiltinQosLibExp::Pattern.ReliableStreaming">
                <publication_name>
                    <name>iceDataWriter</name>
                </publication_name>
                <durability>
                    <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
                </durability>
                <liveliness>
                    <lease_duration>
                        <sec>2</sec>
                        <nanosec>0</nanosec>
                    </lease_duration>
                </liveliness>
                <ownership>
                    <kind>EXCLUSIVE_OWNERSHIP_QOS</kind>
                </ownership>
            </datawriter_qos>

            <!-- QoS used to configure the data writer that writes reliable streaming data -->
            <datareader_qos base_name="BuiltinQosLibExp::Pattern.ReliableStreaming">
                <subscription_name>
                    <name>iceDataReader</name>
                </subscription_name>
              <durability>
                <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind>
              </durability>
              <liveliness>
                <lease_duration>
                  <sec>2</sec>
                  <nanosec>0</nanosec>
                </lease_duration>
              </liveliness>
              <ownership>
                <kind>EXCLUSIVE_OWNERSHIP_QOS</kind>
              </ownership>

            </datareader_qos>

            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>Bedside Supervisor Participant</name>
                    <role_name>bedsideSupervisorRole</role_name>
                </participant_name>
              
                <!-- The ICE framework disables shared memoruy, so these 
                     applications must do the same to communicate -->
                <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin>

            </participant_qos>
        </qos_profile>
      

        <!-- ============================================================== -->
        <!--                     Alarm Data Profiles                        -->
        <!-- ============================================================== -->
        <!-- QoS profile used to configure stateful Alarm communication between  
             DataWriters and DataReaders.

             A QoS profile groups a set of related QoS.
        -->
        <qos_profile name="Alarms" base_name="BuiltinQosLib::Generic.Common">

            <!-- QoS used to configure the data writer that writes alarm 
                 state data -->
            <datawriter_qos base_name="BuiltinQosLibExp::Pattern.AlarmStatus">
                <publication_name>
                    <name>iceDataWriter</name>
                </publication_name>
            </datawriter_qos>

            <!-- QoS used to configure the data writer that writes alarm 
                 state data -->
            <datareader_qos base_name="BuiltinQosLibExp::Pattern.AlarmStatus">
                <subscription_name>
                    <name>iceDataReader</name>
                </subscription_name>
            </datareader_qos>

            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>Bedside Supervisor Participant</name>
                    <role_name>bedsideSupervisorRole</role_name>
                </participant_name>\
                <!-- The ICE framework disables shared memoruy, so these 
                     applications must do the same to communicate -->

                <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin>

            </participant_qos>
        </qos_profile>

      <!-- ============================================================== -->
      <!--                   Patient-Device Profiles                      -->
      <!-- ============================================================== -->
      <!-- QoS profile used to configure stateful patient-device mapping.

             A QoS profile groups a set of related QoS.
        -->
      <qos_profile name="PatientDeviceProfile" base_name="BuiltinQosLib::Generic.Common">

        <!-- QoS used to configure the data writer that writes  
                 state data -->
        <datawriter_qos base_name="BuiltinQosLibExp::Pattern.Status">
          <publication_name>
            <name>patientDeviceMappingDataWriter</name>
          </publication_name>
        </datawriter_qos>

        <!-- QoS used to configure the data writer that writes  
                 state data -->
        <datareader_qos base_name="BuiltinQosLibExp::Pattern.Status">
          <subscription_name>
            <name>patientDeviceMappingDataReader</name>
          </subscription_name>
        </datareader_qos>

        <participant_qos>
            <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
            <participant_name>
                <name>Patient-Device Mapping Participant</name>
                <role_name>patientDeviceMappingRole</role_name>
              </participant_name>

            <!-- The ICE framework disables shared memoruy, so these 
                     applications must do the same to communicate -->
            <transport_builtin>
                <mask>UDPv4</mask>
            </transport_builtin>

        </participant_qos>
      </qos_profile>

      <!-- ============================================================== -->
        <!--                     Participant Profiles                       -->
        <!-- ============================================================== -->
        <qos_profile name="BedsideSupervisor"
                   base_name="BuiltinQosLib::Generic.Common">

            <participant_qos>
                <!--
                  The participant name, if it is set, will be displayed in the
                  RTI tools, making it easier for you to tell one
                  application from another when you're debugging.
                -->
                <participant_name>
                    <name>Bedside Supervisor Participant</name>
                    <role_name>bedsideSupervisorRole</role_name>
                </participant_name>

                <!-- The ICE framework disables shared memoruy, so these 
                     applications must do the same to communicate -->
                <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin>
            </participant_qos>

        </qos_profile>

        <qos_profile name="BedsideSupervisorNoMulticast" 
                     base_name="BuiltinQosLib::Generic.Common">


            <participant_qos>
                <!--
                The participant name, if it is set, will be displayed in the
                RTI tools, making it easier for you to tell one
                application from another when you're debugging.
                -->
                <participant_name>
                    <name>Bedside Supervisor Participant No Multicast</name>
                    <role_name>bedsideSupervisorRole</role_name>
                </participant_name>

                <!-- The ICE framework disables shared memoruy, so these 
                     applications must do the same to communicate -->
                <transport_builtin>
                    <mask>UDPv4</mask>
                </transport_builtin>

                <!-- Unicast peers to contact other DomainParticipants -->
                <discovery>
                    <initial_peers>
                        <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
                        <!-- Insert addresses here of machines you want     -->
                        <!-- to contact                                     -->
                        <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
                        <element>127.0.0.1</element>
                         <!-- <element>192.168.1.2</element>-->
                    </initial_peers>
                </discovery>

            </participant_qos>
        </qos_profile>


    </qos_library>
</dds>
